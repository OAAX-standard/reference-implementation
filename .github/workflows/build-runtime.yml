name: Build OAAX runtime

on:
  push:
    # branches:
    #   - main

jobs:
  build-runtimes-for-ubuntu:
    timeout-minutes: 10  # Set a timeout of 10 minutes for the job
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
          lfs: true

      - name: Install s3cmd
        run: |
          sudo apt-get update
          sudo apt-get install -y s3cmd

      - name: Configure s3cmd
        run: |
          cat > ~/.s3cfg <<EOF
          [default]
          access_key = ${{ secrets.S3_ACCESS_KEY }}
          secret_key = ${{ secrets.S3_SECRET_KEY }}
          bucket_location = us-east-1
          host_base = ${{ secrets.S3_ENDPOINT_URL }}
          host_bucket = %(bucket)s.${{ secrets.S3_ENDPOINT_URL }}
          use_https = True
          EOF

      - name: Set up environment
        run: sudo bash scripts/setup-env.sh

      - name: Cross-compile runtimes
        run: bash runtime-library/build-runtimes.sh

      - name: Determine version
        run: |
          if [ -f VERSION ]; then
            version=$(cat VERSION)
          else
            exit 1
          fi
          echo "version=$version" >> $GITHUB_ENV

      - name: Upload runtimes to S3
        run: |
          s3cmd put "runtime-library/artifacts/runtime-library-X86_64.tar.gz" "s3://oaax/runtimes/${{ env.version }}/CPU/Ubuntu/x86_64/library.tar.gz"
          s3cmd put "runtime-library/artifacts/runtime-library-AARCH64.tar.gz" "s3://oaax/runtimes/${{ env.version }}/CPU/Ubuntu/aarch64/library.tar.gz"

  build-runtimes-for-windows-x86_64:
    timeout-minutes: 10  # Set a timeout of 10 minutes for the job
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
          lfs: true
      - name: Compile runtime
        run: |
          cd runtime-library
          .\build-runtime.bat
      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if (Test-Path VERSION) {
            $version = Get-Content VERSION
            echo "version=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            throw "VERSION file missing"
          }
      - name: Upload runtimes to Custom S3-Compatible Bucket
        shell: pwsh
        run: |
          $version = $env:version
          $artifactPath = "runtime-library\artifacts\runtime-library-X86_64-Windows.tar.gz"
          $targetKey = "runtimes/$version/CPU/Windows/x86_64/library.tar.gz"

          $s5cmdUrl = "https://github.com/peak/s5cmd/releases/download/v2.3.0/s5cmd_2.3.0_Windows-64bit.zip"
          $s5cmdZip = "$env:USERPROFILE\s5cmd.zip"
          $s5cmdPath = "$env:USERPROFILE\s5cmd"
          Invoke-WebRequest -Uri $s5cmdUrl -OutFile $s5cmdZip
          Expand-Archive -Path $s5cmdZip -DestinationPath $s5cmdPath -Force
          Remove-Item -Path $s5cmdZip

          $env:PATH += ";$s5cmdPath"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::User)

          if (-Not (Test-Path $artifactPath)) {
            throw "Artifact not found: $artifactPath"
          }

          Write-Host "Uploading $artifactPath to s3://oaax/$targetKey"
          $env:AWS_ACCESS_KEY_ID = "${{ secrets.S3_ACCESS_KEY }}"
          $env:AWS_SECRET_ACCESS_KEY = "${{ secrets.S3_SECRET_KEY }}"
          s5cmd --endpoint-url "https://${{ secrets.S3_ENDPOINT_URL }}" cp "$artifactPath" "s3://oaax/$targetKey"
